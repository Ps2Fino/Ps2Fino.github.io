<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>"There's always money in the banana stand!" - Technology</title><link href="https://ps2fino.github.io/" rel="alternate"></link><link href="https://ps2fino.github.io/feeds/technology.atom.xml" rel="self"></link><id>https://ps2fino.github.io/</id><updated>2022-11-17T12:00:47+01:00</updated><entry><title>Lancomarker: Computer Assisted Marking Administration</title><link href="https://ps2fino.github.io/lancomarker.html" rel="alternate"></link><published>2022-10-24T00:00:00+02:00</published><updated>2022-11-17T12:00:47+01:00</updated><author><name>"Daniel J. Finnegan"</name></author><id>tag:ps2fino.github.io,2022-10-24:/lancomarker.html</id><summary type="html">&lt;p&gt;Marking.
I dread it.
Not regarding the content: I believe students&amp;#8212;when giving the right conditions to express themselves and learn&amp;#8212;can produce fantastic scholarship.
I&amp;#8217;m always interested in ways to improve my coursework to ensure it is making use of the current best practice in teaching and learning …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Marking.
I dread it.
Not regarding the content: I believe students&amp;#8212;when giving the right conditions to express themselves and learn&amp;#8212;can produce fantastic scholarship.
I&amp;#8217;m always interested in ways to improve my coursework to ensure it is making use of the current best practice in teaching and learning.
However: the burden around the &lt;em&gt;procedure&lt;/em&gt; of marking is something that is most unwelcome.
Every year I waste time having to manage hundreds of files, not counting appendices and miscellaneous image files students may include with their coursework submission.
So I built this.
You can jump straight to the video demo below by clicking &lt;a href="#video-demo"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What is&amp;nbsp;Lancomarker?&lt;/h2&gt;
&lt;p&gt;Lancomarker is a suite of web applications for automating much of the student coursework marking process.
It consists of 3 main tools: Lancomarker, Lancomarker Processing, and &lt;a target="_blank" href="https://users.cs.cf.ac.uk/FinneganD"&gt;&lt;i&gt;Lancomarker Student Interface Application (&lt;span class="caps"&gt;SIA&lt;/span&gt;)&lt;/i&gt;&lt;/a&gt;.
Together, these tools form a pipeline for information flow; students write their coursework, submit via the familar channels, and then the instructor can mark submissions and generate feedback with less administrative&amp;nbsp;effort.&lt;/p&gt;
&lt;h2&gt;Why did I build&amp;nbsp;Lancomarker?&lt;/h2&gt;
&lt;p&gt;In 2021, I spent 6 weeks marking student coursework.
This was intense, and meant I had no capacity for engaging in any other academic commitment during this time.
Reflecting on the workload, I realized there were severe bottlenecks throughout the marking process.&amp;nbsp;Namely, &lt;/p&gt;
&lt;p&gt;1) Student submissions: My coursework consists of essay/prose, which although may appear unusual for a computing course, is essential to assessing students&amp;#8217; engagement with the course material as it encourages critical thinking and communication. Both of these skills are necessary for software engineers to work in teams of people with broad skillsets.
To facilitate this, students submit their coursework in &lt;span class="caps"&gt;PDF&lt;/span&gt; formats, however &lt;span class="caps"&gt;PDF&lt;/span&gt; is a terrible format for several reasons. 
First, it is immutable (for the most part): one may annotate a &lt;span class="caps"&gt;PDF&lt;/span&gt; file, but these annotations are not easily updated/modified. Secondly, it is not machine readable: it is non-trivial to parse &lt;span class="caps"&gt;PDF&lt;/span&gt; annotations and/or convert them to alternative formats. 
This is useful for transcribing comments for visually impaired students and/or collating comments into a report for feeding back to the school.
To combat this, some may suggest a &lt;span class="caps"&gt;WYSIWYG&lt;/span&gt; editor for example Microsoft Word. 
However, these all come with their own file format problems, for example incompatability across operating systems and/or how images and text are rendered. 
In the past, I have tried giving students Word templates to use but this has never been a satisfactory solution to the&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;All of these factors contributed to unnecessary administrative burden when marking as I would open and close several different applications simply to read a student&amp;#8217;s submission. 
This is related to the next&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;2) Indexing student coursework: Even with relaxed criteria regarding naming and file type, finding student submissions can be a nightmare. 
I have devised the following (very rough) model for marking a coursework&amp;nbsp;submission:&lt;/p&gt;
&lt;div class="math"&gt;$$ 
T_M = T_f + T_o + T_v + T_m
$$&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(T_f\)&lt;/span&gt; is the time it takes to &lt;em&gt;find&lt;/em&gt; a student&amp;#8217;s submission in the &lt;span class="caps"&gt;VLE&lt;/span&gt;/my local file system, &lt;span class="math"&gt;\(T_o\)&lt;/span&gt; is the time to &lt;em&gt;open&lt;/em&gt; the file on my computer (which itself is a product of processor speed, number of concurrent processes, memory etc), &lt;span class="math"&gt;\(T_v\)&lt;/span&gt; is the time to &lt;em&gt;verify&lt;/em&gt; a submission, which can involve starting the whole process again to find and open a different file, and/or confirming the submission is valid (e.g., follows the rules/assessment criteria).
&lt;span class="math"&gt;\(T_m\)&lt;/span&gt; is the time taken to &lt;em&gt;mark&lt;/em&gt; a piece of coursework.
Let&amp;#8217;s assume this is kept constant as per &lt;span class="caps"&gt;WAM&lt;/span&gt; (spoiler: it&amp;#8217;s often&amp;nbsp;not).&lt;/p&gt;
&lt;p&gt;Below is a simulation I wrote of this model (source in appendix).
I&amp;#8217;ve removed the constant &lt;span class="math"&gt;\(T_m\)&lt;/span&gt; term for visualization.
Bear in mind this is a &lt;em&gt;very optimistic&lt;/em&gt; model, so times could be a lot&amp;nbsp;worse!&lt;/p&gt;
&lt;p&gt;&lt;img src="images/simulated_marking_sessions.jpg" max-width=100% height=auto&gt;&lt;/p&gt;
&lt;p&gt;At best, this is 1.8 hours of my life I&amp;#8217;m not getting back &lt;em&gt;every time I have a marking task to complete&lt;/em&gt; because file management is time intensive.
Lancomarker aims to eliminate this time wasting&amp;nbsp;completely.&lt;/p&gt;
&lt;p&gt;3) Preparing student marks for submission to school boards: In parallel to marking, I had to manually update a spreadsheet with each students&amp;#8217; marks. This is not just another time sink, but is also an opportunity for human error as I transcribe the mark manually by hand from the &lt;span class="caps"&gt;PDF&lt;/span&gt; comments/rubric.
Having done this several times and realized it was silly, I&amp;#8217;d had&amp;nbsp;enough.&lt;/p&gt;
&lt;p&gt;So I built&amp;nbsp;Lancomarker.&lt;/p&gt;
&lt;h2&gt;How does it&amp;nbsp;work?&lt;/h2&gt;
&lt;p&gt;The pipeline is as&amp;nbsp;follows:&lt;/p&gt;
&lt;p&gt;1) Students complete their coursework via the &lt;span class="caps"&gt;SIA&lt;/span&gt; &lt;em&gt;or&lt;/em&gt; simply writing the text file.
This is the first time gain: I teach computer science students, which means having a basic text editor is a prerequisite.
They can use any text editor they want (even create their own), and complete their coursework.
Factor over form: what matters is the content, not the presentation here.
The &lt;span class="caps"&gt;SIA&lt;/span&gt; gives several other benefits; I can dictate filenames (something that comes useful later on) as students more often than not will incorrectly name a file through accident or malice.
I can also enforce coursework constraints such as appendices (e.g., &lt;span class="caps"&gt;PNG&lt;/span&gt;/&lt;span class="caps"&gt;JPG&lt;/span&gt; only for images) and character limits for written&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;2) Students submit their work using standard channels.
This makes the system very flexible, as there is no need for them to learn a new platform if they don&amp;#8217;t want to, and there is no effort on &lt;span class="caps"&gt;IT&lt;/span&gt; and/or admin to accommodate Lancomarker format submissions.
From outside Lancomarker, the existing submission procedure is as it&amp;nbsp;was.&lt;/p&gt;
&lt;p&gt;3) Submissions are batch downloaded, zipped up, then pre-processed using Lancomarker Processing.
This step creates an intermediary representation of submissions.
At this point, the instructor may generate unmarked PDFs of all submissions to mark the old way should they choose to.
This might sound odd, but it is critical to team work: my modules are (fortunately) supported by some TAs who may assist with marking, and who may not wish to use Lancomarker, instead preferring to read PDFs.
The point is this: as all submissions have been processed, they are now &lt;em&gt;readily indexable&lt;/em&gt; meaning they can be found based on a known &lt;span class="caps"&gt;ID&lt;/span&gt; (e.g., student number) rather than whatever file name was provided by the student.
Should the instructor wish to continue with Lancomarker, they can then process submissions further into the Lancomarker&amp;nbsp;format.&lt;/p&gt;
&lt;p&gt;4) Submissions are then uploaded to Lancomarker.
Using Lancomarker, I can now pull submissions directly from a database, giving me direct access to a submission with a single click.
Lancomarker presents the submission as rendered &lt;span class="caps"&gt;HTML&lt;/span&gt;, and provides a &lt;span class="caps"&gt;UI&lt;/span&gt; for associating a mark value to each section of the written report.
This also facilitates error checking: as Lancomarker knows the maximum marks for a section, the instructor can&amp;#8217;t accidentally assign a mark greater than the limit as may happen when simply marking a &lt;span class="caps"&gt;PDF&lt;/span&gt;.
The &lt;span class="caps"&gt;UI&lt;/span&gt; also facilitates freetext comments for&amp;nbsp;sections.&lt;/p&gt;
&lt;p&gt;5) Marked submissions are downloaded from Lancomarker, then processed further using Lancomarker Processing.
Here marked PDFs are generated, along with any &lt;span class="caps"&gt;CSV&lt;/span&gt; spreadsheets required.
As everything is machine readable, it is trivial to import marked submissions into whatever statistics software tickles your fancy for generating summary reports&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;All in all, software should &lt;em&gt;help&lt;/em&gt;, not &lt;em&gt;hinder&lt;/em&gt; work.
Marking coursework is a widely mandated activity for academics, so I was surprised that few were looking to improve the processes around marking, at least within my immediate network.
Lancomarker is deployed in the 2022/23 academic year.
Let&amp;#8217;s see if my theoretical time gain holds up in&amp;nbsp;practice.&lt;/p&gt;
&lt;h2&gt;&lt;a id="video-demo"&gt;&lt;/a&gt; Video&amp;nbsp;Demo&lt;/h2&gt;
&lt;p align="center"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/K-xx8vfYA0A" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;Appendix&lt;/h3&gt;
&lt;p&gt;R code for those who&amp;nbsp;care:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;## consider a normal distribution for opening a file&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;## consider a poisson distribution for finding a file&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;## consider a bernoulli distribution for verifying a file&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;232&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;## Number of students enrolled on CM1301 in the 2022/23 Academic Year&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;simulate_marking&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_submissions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;num_faulty_submissions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_submissions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rbinom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                                                      &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num_submissions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                                                      &lt;/span&gt;&lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tibble&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rpois&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_submissions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rnormTrunc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_submissions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                                          &lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                                          &lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                                          &lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                              &lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;time_to_find_open&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;mutate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time_taken&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;time_to_verify_faulty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tibble&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rpois&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_faulty_submissions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rnormTrunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_faulty_submissions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                                    &lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                         &lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;mutate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time_taken&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;time_to_verify_non_faulty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_submissions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_faulty_submissions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;time_to_mark&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;## constant so ignore for now&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;total_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time_to_find_open&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;time_taken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time_to_verify_faulty&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;time_taken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;time_to_verify_non_faulty&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time_to_mark&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;## Gimme hours&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;## Run the simulation&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;simulation_data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sapply&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;simulate_marking&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Technology"></category><category term="javascript"></category><category term="teaching"></category><category term="innovation"></category><category term="development"></category></entry><entry><title>Lancometer — Interactive quizzes in the classroom</title><link href="https://ps2fino.github.io/lancometer.html" rel="alternate"></link><published>2020-01-29T00:00:00+01:00</published><updated>2020-02-21T14:25:38+01:00</updated><author><name>Daniel J. Finnegan</name></author><id>tag:ps2fino.github.io,2020-01-29:/lancometer.html</id><summary type="html">&lt;p&gt;Recently, technology for real-time polling of information has become popular to do quick, interactive quizzes for presentations and also as an educational tool in the classroom, for example, tools like &lt;a href="https://www.mentimeter.com/"&gt;MentiMeter&lt;/a&gt; and &lt;a href="https://socrative.com/"&gt;Socrative&lt;/a&gt;.
Whilst I was intrigued (I&amp;#8217;m always looking for ways to engage my students) to the advantages …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, technology for real-time polling of information has become popular to do quick, interactive quizzes for presentations and also as an educational tool in the classroom, for example, tools like &lt;a href="https://www.mentimeter.com/"&gt;MentiMeter&lt;/a&gt; and &lt;a href="https://socrative.com/"&gt;Socrative&lt;/a&gt;.
Whilst I was intrigued (I&amp;#8217;m always looking for ways to engage my students) to the advantages they may offer towards the student experience and learning, I wasn&amp;#8217;t prepared to change my workflow to fit in to any specific format such technologies may prescribe: I generate &lt;span class="caps"&gt;HTML&lt;/span&gt; presentations using &lt;a href="https://bookdown.org/"&gt;bookdown&lt;/a&gt; and don&amp;#8217;t use PowerPoint for example.
I also didn&amp;#8217;t want to have to download any mobile application or worse, force my students to download anything (A &lt;span class="caps"&gt;UX&lt;/span&gt; nightmare for the&amp;nbsp;classroom!)&lt;/p&gt;
&lt;p&gt;So over the 2019/20 christmas period, I developed a small web application to facilitate interactive sessions during my lectures.
Hosted on the school&amp;#8217;s &lt;a href="https://www.openstack.org/"&gt;OpenStack&lt;/a&gt; platform, all I do is simply embed the page in an &lt;code&gt;iframe&lt;/code&gt; using &lt;a href="https://yihui.org/knitr/"&gt;knitr&lt;/a&gt; and go from there.
The students just point their device (phone, laptop, whatever) to a &lt;span class="caps"&gt;URL&lt;/span&gt; or use the generated &lt;span class="caps"&gt;QR&lt;/span&gt; code and they can instantly join (no login/codes required).
My web development skills were rusty (haven&amp;#8217;t really done anything web based since late 2015) so it seemed like a good exercise and christmas was the only time I&amp;#8217;d get to do it before the new teaching semester&amp;nbsp;began.&lt;/p&gt;
&lt;p&gt;Having trialled it in the classroom, here are my initial&amp;nbsp;observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Students &lt;em&gt;really&lt;/em&gt; liked it. Like &lt;strong&gt;a lot&lt;/strong&gt;!&lt;/li&gt;
&lt;li&gt;I was skeptical as I&amp;#8217;ve heard the argument where its really just a digital &amp;#8216;show of hands&amp;#8217;. However, it really is more than that. For example, its easier to visualize in a bar chart a show of hands for a set of options rather than go through each in turn. Also, and here&amp;#8217;s where I think the magic lies and is worth further study, I can see how the show of hands changes &lt;em&gt;over time&lt;/em&gt;. I have some ideas for how to study this in an experiment which I&amp;#8217;ll do at some&amp;nbsp;point.&lt;/li&gt;
&lt;li&gt;Having my own system means I can discuss the internals of the system: this is useful when teaching a module like &lt;a href="https://data.cardiff.ac.uk/legacy/grails/module/CM1202/19A.html"&gt;&lt;span class="caps"&gt;CM1202&lt;/span&gt;&lt;/a&gt;. Students are also &lt;em&gt;really interested&lt;/em&gt; in seeing how things work (especially first years) and I could create a welcoming environment for feedback where they can voice their opinions and suggest new features. Suggestions are one thing but when I can then go and &lt;em&gt;implement&lt;/em&gt; their suggestions, and they see this in a future lecture (for example, the &amp;#8216;Show Answer&amp;#8217; utility was something I was unsure about at first but implemented it after an initial pilot at which point a student also thought it would be a good idea), students &lt;em&gt;really&lt;/em&gt; appreciate&amp;nbsp;it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;#8217;s a video of Lancometer* in&amp;nbsp;action.&lt;/p&gt;
&lt;p align="center"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/KwnxS3B43Rg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;* Or perhaps you were looking for &lt;a href="https://thelincolnite.co.uk/2019/01/limited-prints-a-fitting-tribute-to-dambusters/"&gt;this&lt;/a&gt;&amp;nbsp;lancometer&amp;#8230;&lt;/p&gt;</content><category term="Technology"></category><category term="python"></category><category term="development"></category><category term="teaching"></category><category term="lancometer"></category></entry><entry><title>Avalon board game companion application</title><link href="https://ps2fino.github.io/avalon-callout.html" rel="alternate"></link><published>2018-07-12T00:00:00+02:00</published><updated>2019-06-21T17:00:16+02:00</updated><author><name>Daniel J. Finnegan</name></author><id>tag:ps2fino.github.io,2018-07-12:/avalon-callout.html</id><summary type="html">&lt;p&gt;The latest version is now available as a &lt;a href="https://play.google.com/store/apps/details?id=com.Lancophone.AvalonCallout"&gt;&lt;em&gt;free download&lt;/em&gt;&lt;/a&gt; on the Google Play&amp;nbsp;Store.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This past week during the evenings, I wrote a small android application just for fun.
It consists of a 3 screen &lt;span class="caps"&gt;UI&lt;/span&gt; for selecting the characters in the game of &lt;a href="https://boardgamegeek.com/boardgame/128882/resistance-avalon"&gt;Avalon&lt;/a&gt;.
Once selected, it generates …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The latest version is now available as a &lt;a href="https://play.google.com/store/apps/details?id=com.Lancophone.AvalonCallout"&gt;&lt;em&gt;free download&lt;/em&gt;&lt;/a&gt; on the Google Play&amp;nbsp;Store.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This past week during the evenings, I wrote a small android application just for fun.
It consists of a 3 screen &lt;span class="caps"&gt;UI&lt;/span&gt; for selecting the characters in the game of &lt;a href="https://boardgamegeek.com/boardgame/128882/resistance-avalon"&gt;Avalon&lt;/a&gt;.
Once selected, it generates the &lt;a href="https://youtu.be/b5iJjQJkWEQ?t=4m30s"&gt;callout&lt;/a&gt; for the game, and then begins to speak it back to the players via&amp;nbsp;text-to-speech.&lt;/p&gt;
&lt;p&gt;Its very rough around the edges (to be fair, I made in a total of about 2.5 working hours over a few days) and contains no accessibility features as of yet.
However, some people may find it useful; I know I sure&amp;nbsp;will!&lt;/p&gt;
&lt;p&gt;Its &lt;a href="https://en.wikipedia.org/wiki/Free_and_open-source_software"&gt;&lt;span class="caps"&gt;FOSS&lt;/span&gt;&lt;/a&gt; using the &lt;a href="https://opensource.org/licenses/BSD-3-Clause"&gt;&lt;span class="caps"&gt;BSD&lt;/span&gt;-3 license&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is available from my &lt;a href="https://github.com/Ps2Fino/Avalon-App/"&gt;Github&lt;/a&gt;.
Its also &lt;a href="https://ps2fino.github.io/updater.html"&gt;Updater&lt;/a&gt;&amp;nbsp;compatible.&lt;/p&gt;</content><category term="Technology"></category><category term="C#"></category><category term="development"></category></entry><entry><title>Updater — A cmake template engine</title><link href="https://ps2fino.github.io/updater.html" rel="alternate"></link><published>2018-05-30T00:00:00+02:00</published><updated>2019-07-23T00:00:00+02:00</updated><author><name>Daniel J. Finnegan</name></author><id>tag:ps2fino.github.io,2018-05-30:/updater.html</id><summary type="html">&lt;p&gt;Today I&amp;#8217;m delighted to finally release Updater, a handy little template engine written in python for creating boilerplate project scaffolding code with one click.
Updater essentially creates a templated directory structure along with initial &lt;code&gt;CMakeLists.txt&lt;/code&gt; files.
This helps ensure that the project will always be&amp;nbsp;compilable.&lt;/p&gt;
&lt;p&gt;Updater grew …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I&amp;#8217;m delighted to finally release Updater, a handy little template engine written in python for creating boilerplate project scaffolding code with one click.
Updater essentially creates a templated directory structure along with initial &lt;code&gt;CMakeLists.txt&lt;/code&gt; files.
This helps ensure that the project will always be&amp;nbsp;compilable.&lt;/p&gt;
&lt;p&gt;Updater grew from an observation I made working with students.
As they&amp;#8217;re still learning how to program, it can be overwhelming for them to ensure their code is well maintained and structured.
Using Updater enables them to focus on the implementation task, while giving me some assurance that I will always be able to build the&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;Updater is &lt;a href="https://en.wikipedia.org/wiki/Free_and_open-source_software"&gt;&lt;span class="caps"&gt;FOSS&lt;/span&gt;&lt;/a&gt; using the &lt;a href="https://opensource.org/licenses/BSD-3-Clause"&gt;&lt;span class="caps"&gt;BSD&lt;/span&gt;-3 license&lt;/a&gt;.
It is available from my &lt;a href="https://github.com/Ps2Fino/Updater/releases/tag/v1.5.1"&gt;Github&lt;/a&gt;.&lt;/p&gt;</content><category term="Technology"></category><category term="python"></category><category term="development"></category><category term="research"></category></entry><entry><title>Rendering spatial audio on a desktop: The SSR and APF libraries</title><link href="https://ps2fino.github.io/ssr.html" rel="alternate"></link><published>2015-02-01T00:00:00+01:00</published><updated>2018-03-29T00:00:00+02:00</updated><author><name>Daniel J. Finnegan</name></author><id>tag:ps2fino.github.io,2015-02-01:/ssr.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been playing around with the &lt;a class="reference external" href="http://www.spatialaudio.net/ssr"&gt;&lt;span class="caps"&gt;SSR&lt;/span&gt;&lt;/a&gt; library in order to render
a binaural soundscape for a project I&amp;#8217;m working on.
Whilst a great library, I struggled to get to grips with it for a few days.
The library makes heavy use of templates (a powerful paradigm of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been playing around with the &lt;a class="reference external" href="http://www.spatialaudio.net/ssr"&gt;&lt;span class="caps"&gt;SSR&lt;/span&gt;&lt;/a&gt; library in order to render
a binaural soundscape for a project I&amp;#8217;m working on.
Whilst a great library, I struggled to get to grips with it for a few days.
The library makes heavy use of templates (a powerful paradigm of C++ but can be awkward to read) and is written
using some design patterns I had never encountered&amp;nbsp;before.&lt;/p&gt;
&lt;p&gt;I started by reading some of the source code, trying to compile the header-only library and get some test code working.
After spending hours getting the library to compile, I was ready to try it out with some sample assets from
&lt;a class="reference external" href="https://ps2fino.github.io/first-post.html#audio-defence"&gt;Audio Defence&lt;/a&gt;. Compiler errors began to arise upon simply instantiating the ssr::BinauralRenderer so I had to dig a little deeper.
I had a read of the source code and I came across some examples that were included in the repository.
I also emailed one of the author&amp;#8217;s of the library to ask for some help with integrating the &lt;span class="caps"&gt;SSR&lt;/span&gt; as a library into my existing framework in order to handle the binaural&amp;nbsp;rendering.&lt;/p&gt;
&lt;p&gt;After a week of bashing my head against the wall, I&amp;#8217;ve now managed to pump out some spatial sound from the renderer, sending it out to the speakers and dumping it to a stereo file.
I&amp;#8217;ve decided to jot down some notes here to help me remember how the thing&amp;nbsp;works!!&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The ssr::BinauralRenderer is a subclass of the apf::MimoProcessor, which is an abstract multiple input/multiple
output processor that enables the programmer to implement the processing callback while handling the threading
and access control of the samples held in the processor&amp;#8217;s buffer.
The renderer is instantiated by passing a apf::paramter_map instance which is a key-value dictionary of configuration settings for the renderer. The main settings required are the sample rate, block size and the location (full path) to the &lt;span class="caps"&gt;HRIR&lt;/span&gt; file that contains the impulse responses for&amp;nbsp;convoluion.&lt;/li&gt;
&lt;li&gt;The processor functions through use of the
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Policy-based_design"&gt;Policy Design Pattern&lt;/a&gt;. This design pattern dictates that
a can have a number of different policies for
responding to similar situations (ie. a class may have a number of different policies regarding the printing of
data to a file or to a &lt;span class="caps"&gt;TCP&lt;/span&gt; stream).
In my case, the policies that the renderer is concerned with are its interface (how to process it&amp;#8217;s data
buffers at each audio cycle or rather how to &amp;#8216;use&amp;#8217; and interface with it) and how to act in a threaded manner.
To specify which policies to use, you simply include the header file of the policy and define a macro called APF_MIMOPROCESSOR_INTERFACE_POLICY for the interface policy and APF_MIMOPROCESSOR_THREAD_POLICY for the thread policy. The library comes with a default thread header which just uses a single threaded policy (ie. not implemented) on windows and the &lt;span class="caps"&gt;POSIX&lt;/span&gt; library for *nix and &lt;span class="caps"&gt;OSX&lt;/span&gt;&amp;nbsp;systems.&lt;/li&gt;
&lt;li&gt;In order to use the binaural rendererer, you need to specify the policies you want to use. The renderer relies
on two policies in it&amp;#8217;s implementation; an interface policy and a threading policy. To use the renderer as a standalone module, the pointer policy must be used. This then opens up the audioCallback function to be called manually by the application programmer when they want to process some data. The function accepts 3 arguments, the block size of the frame to be processed, a pointer to a series of inputs and a pointer to a pair of outputs (as the binaural renderer is an instance of an N-input, 2-output processor for stereo binaural&amp;nbsp;output).&lt;/li&gt;
&lt;li&gt;The processor requires it&amp;#8217;s input to be a pointer to a list of channels. These channels can be implemented as a
series of vectors. The renderer&amp;#8217;s output is also expected to be a series of vectors representing the audio channels. The inputs should be a N * BLOCK_SIZE matrix where BLOCK_SIZE is the number of frames to be processed as a block during each run of the audio cycle. The N is the number of channels in the input. The outputs should be a 2 * BLOCK_SIZE matrix, indicating stereo output.
The renderer expects a 1-1 mapping of input channels to sources, and the sources are ordered with the channels (ie Channels[0] is the first source, Channels[1] the second&amp;nbsp;etc&amp;#8230;)&lt;/li&gt;
&lt;li&gt;Finally, for dumping to a file, you need to transpose the channels as libsndfile reads in row-wise order,
intereleaving the channels as it dumps to the file. This was the major source of confusion for me and it took some fiddling and multiple reads of the source repo to understand how that&amp;nbsp;worked.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So to recap; the binaural renderer can be instantiated after specifying the policies required to do it&amp;#8217;s thing.
Next you need to generate a parameter map, a key-value dictionary containing the configuration (block size, &lt;span class="caps"&gt;HRIR&lt;/span&gt; file path etc.) for the renderer. In order to use the renderer, you pass a pointer to a list of arrays representing the channels of the audio (best to use the apf::fixed_matrix container that comes with the &lt;span class="caps"&gt;APF&lt;/span&gt;&amp;nbsp;framework).&lt;/p&gt;
&lt;p&gt;A blunder was in dumping the output to a file; this wasn&amp;#8217;t the &lt;span class="caps"&gt;SSR&lt;/span&gt;&amp;#8217;s fault as &lt;a class="reference external" href="http://www.mega-nerd.com/libsndfile/api.html"&gt;libsndfile&lt;/a&gt; expects reads and writes in row wise order for (de)interleaving. All I had to do here is have a second output buffer which is the transposed matrix of the output list of channels. You can then call the writef() function of the SndFileHandle object in the libsndfile C++ &lt;span class="caps"&gt;API&lt;/span&gt; for writing stereo output to the&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;Having figured all of this out I can finally move onto the image processing aspect of my project. More on this to come&amp;nbsp;later.&lt;/p&gt;
</content><category term="Technology"></category><category term="binaural"></category><category term="C++"></category><category term="development"></category><category term="research"></category></entry></feed>